#!/bin/sh

# all keys containing colons are converted to underbars
# for example and "wof:id" becomes "wof_id" and so on

# csv2sqlite <DATABASE> <TABLE> <INDEXES> <CSVFILES>

# to simply index wof:id you would do
# csv2sqlite concordances-admin.db concordances '' /usr/local/mapzen/whosonfirst-data/meta/wof-concordances-latest.csv 

# to index wof:id and gp:id and gn:id you would do
# csv2sqlite concordances-admin.db concordances 'gp:id,gn:id' /usr/local/mapzen/whosonfirst-data/meta/wof-concordances-latest.csv 

# see the way we're passing keys with colons <-- the code tries to take care of that

# csv2sqlite admin.db whosonfirst '' `ls -a /usr/local/data/whosonfirst-data/meta/wof-*-latest.csv | grep -v concordances | grep -v address`

SQLITE=`which sqlite3`
PERL=`which perl`

DB=$1
shift

TABLE=$1
shift

INDEXES=$1
shift

FIRST=$1
shift

if [ -f ${DB} ]
then
    echo "${DB} already exists!"
    exit 1
fi

# First generate a table spec based on the header in the CSV file

# I have no idea why I need to write this data to a file in order
# to successfully append a final comma but if I don't then /bin/sh
# puts the final comma in some random place inside of the stuff...
# Maybe string variable length? Dunno... (20160511/thisisaaronland)

if [ -f head.txt ]
then
    rm head.txt
fi

head -n 1 ${FIRST} > head.txt
echo -n ";" >> head.txt

${PERL} -pi -e 's/\R//g' head.txt	# guh... see above

SPEC=`cat head.txt | tr ':' '_' | sed 's/,/ TEXT,/g' | sed 's/;/ TEXT/' | sed 's/wof_id TEXT/wof_id INTEGER PRIMARY KEY/' | sed 's/ id TEXT/ id INTEGER PRIMARY KEY/' | sed 's/gp_id TEXT/gp_id INTEGER/' | sed 's/gn_id TEXT/gn_id INTEGER/'`

rm head.txt

echo "# table spec is ${SPEC}"

# Now we create the table and table spec using the first available CSV file

${SQLITE} ${DB} "CREATE TABLE ${TABLE} (${SPEC})"

for IDX in `echo ${INDEXES} | tr ',' '\n'`
do
    IDX=`echo ${IDX} | tr ':' '_'`
    ${SQLITE} ${DB} 'CREATE INDEX `by_'${IDX}'` ON ${TABLE} (`'${IDX}'`)'
done

# Now we import all the CSV files

for CSV in ${FIRST} "$@"
do

    COUNT=`wc -l ${CSV} | awk '{ print $1 }'`
    echo "# import ${CSV} with ${COUNT} records"

    WORK="${CSV}.work"
    cp ${CSV} ${WORK}

    sed -i 1d ${WORK}

    ${SQLITE} ${DB} -cmd '.mode csv' ".import ${WORK} ${TABLE}"

    rm ${WORK}
done

exit 1
